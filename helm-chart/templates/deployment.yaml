apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gogs.fullname" . }}
  labels:
    app: {{ include "gogs.name" . }}
spec:
  replicas: {{ .Values.gogs.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ include "gogs.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "gogs.name" . }}
    spec:
      containers:
        - name: gogs
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DB_TYPE
              value: "postgres"
            - name: DB_HOST
              value: {{ if .Values.externalDatabase.enabled }}"{{ .Values.externalDatabase.host }}:{{ .Values.externalDatabase.port }}"{{ else }}"{{ include "gogs.fullname" . }}-postgresql:5432"{{ end }}
            - name: DB_USER
              value: {{ if .Values.externalDatabase.enabled }}"{{ .Values.externalDatabase.user }}"{{ else }}"{{ .Values.postgresql.auth.username }}"{{ end }}
            - name: DB_PASSWD
              {{- if .Values.externalDatabase.enabled }}
                {{- if .Values.externalDatabase.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalDatabase.existingSecret }}
                  key: postgres-password
                {{- else }}
              value: ""
                {{- end }}
              {{- else }}
                {{- if .Values.postgresql.auth.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret }}
                  key: postgres-password
                {{- else }}
              value: "{{ .Values.postgresql.auth.password }}"
                {{- end }}
              {{- end }}
            - name: DB_NAME
              value: {{ if .Values.externalDatabase.enabled }}"{{ .Values.externalDatabase.database }}"{{ else }}"{{ .Values.postgresql.auth.database }}"{{ end }}
            - name: RUN_CROND
              value: "true"
            - name: APP_NAME
              value: "Gogs"
            - name: DOMAIN
              value: "{{ default "" .Values.ingress.hostname }}"
            - name: SSH_PORT
              value: "{{ .Values.service.sshPort }}"
            - name: HTTP_PORT
              value: "{{ .Values.service.webPort }}"
            - name: APP_URL
              value: {{ if .Values.ingress.hostname }}"http://{{ .Values.ingress.hostname }}"{{ else }}""{{ end }}
            - name: LOG_ROOT_PATH
              value: "/data/gogs/log"
          ports:
            - name: web
              containerPort: {{ .Values.service.webPort }}
            - name: ssh
              containerPort: {{ .Values.service.sshPort }}
          livenessProbe:
            httpGet:
              path: /
              port: web
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 3
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: web
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          {{- if .Values.gogs.resources }}
          resources:
            {{- if .Values.gogs.resources.requests }}
            requests:
              {{- toYaml .Values.gogs.resources.requests | nindent 14 }}
            {{- end }}
            {{- if .Values.gogs.resources.limits }}
            limits:
              {{- toYaml .Values.gogs.resources.limits | nindent 14 }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: gogs-data
              mountPath: /data
      volumes:
        - name: gogs-data
          persistentVolumeClaim:
            claimName: {{ include "gogs.fullname" . }}-pvc

